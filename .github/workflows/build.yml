# build.yml
on:
  push:
    paths:
    - 'api-gw/**'
    - 'customer-service/**'
    - 'order-service/**'
    - '.github/**'
    branches:         # array of glob patterns matching against refs/heads. Optional; defaults to all
    - main          # triggers on pushes that contain changes in master

name: Build and Push to ECR, Deploy to EKS

# https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html
env:
  AWS_DEFAULT_REGION: us-west-2
  AWS_DEFAULT_OUTPUT: json
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  CONTAINER_IMAGE_API_GW: api-gw:${{ github.sha }}
  CONTAINER_IMAGE_CUSTOMER_SERVICE: customer-service:${{ github.sha }}
  CONTAINER_IMAGE_ORDER_SERVICE: order-service:${{ github.sha }}

jobs:
  build-and-push:
    name: Build and push
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@master

    # Add steps here like linting, testing, minification, etc.
    

    - name: Build and tag the image api-gw
      run: |
        # Build and tag the image
        docker build \
          -t $CONTAINER_IMAGE_API_GW \
          -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE_API_GW ./api-gw

    - name: Build and tag the image customer-service
      run: |
        # Build and tag the image
        docker build \
          -t $CONTAINER_IMAGE_CUSTOMER_SERVICE \
          -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE_CUSTOMER_SERVICE ./customer-service

    - name: Build and tag the image order-service
      run: |
        # Build and tag the image
        docker build \
          -t $CONTAINER_IMAGE_ORDER_SERVICE \
          -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE_ORDER_SERVICE ./order-service
           
    # Add additional steps here like scanning of image

    # Only push to registry on master

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1


    - name: Push
      if: github.ref == 'refs/heads/main'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # Push images to AWS ECR
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE_API_GW
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE_CUSTOMER_SERVICE
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE_ORDER_SERVICE

  deploy-2-eks:
    name: deploy-2-eks
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Checkout
      uses: actions/checkout@master


    - name: Setup kubeconfig
      id: setup-kubeconfig
      run: |
        aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $EKS_CLUSTER_NAME

    - name: Deploy 
      env:
        MANIFESTS_DIR: ./manifests 
      run: |
        # Setup kustomize
        cd $MANIFESTS_DIR
        curl -s -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
        ./kustomize edit set image api-gw-image=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE_API_GW
        ./kustomize edit set image customer-service-image=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE_CUSTOMER_SERVICE
        ./kustomize edit set image order-service-image=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE_ORDER_SERVICE
        ./kustomize build . | kubectl apply -f -
        # List Public IP of cluster
        kubectl get services -o wide
        #get Load Balancer
        export loadbalancer=$(kubectl get svc api-gw-external -o jsonpath='{.status.loadBalancer.ingress[*].hostname}')

    - name: Test LB GW
      env:
        MANIFESTS_DIR: ./manifests 
      run: |
        #wait for IP to the available
        sleep 120
        # List Public IP of cluster
        kubectl get services -o wide
        #kubectl get loadbalancer
        export loadbalancer=$(kubectl get svc api-gw-external -o jsonpath='{.status.loadBalancer.ingress[*].hostname}')
        echo "URL to test http://${loadbalancer}:8080/order"
        curl -k -s http://${loadbalancer}:8080/order | grep amount

